{"version":3,"sources":["webpack:///./src/lib/mr-common/mr-request.mdx","webpack:///./src/lib/mr-common/mr-request.ts"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","href","className","CancelToken","axios","responseHandler","response","rst","resultType","config","mock","data","_typeof","MrServices","Promise","resolve","errorHandler","err","isCancel","reject","headers","status","statusText","$message","error","self","_reqCatch","Object","prototype","toString","MrRequest","url","options","arguments","length","undefined","getHeaders","mu","map","item","extend","run","cancelToken","then","catch","mrrequest","displayName","__docgenInfo","description","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error"],"mappings":"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","file":"static/js/src-lib-mr-common-mr-request.316764a7.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz';\nimport MrRequest from './mr-request';\n\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"mrrequest\"}}>{`MrRequest`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`基于 axios，做了一层简单的封装，支持拦截器，错误处理等`}</MDXTag>\n<MDXTag name=\"p\" components={components}><MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/axios/axios\"}}>{`axios: Promise based HTTP client for the browser and node.js`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`    // 请求\n    let \\$req = MrRequest(url: string, options: AxiosOptions): Promise<any>;\n\n    \\$req.then((response) => {\n\n        ...\n\n    }).catch((error) => {\n\n        ...\n\n    });\n\n    // --\n\n    async function getUser() {\n        try {\n            const response = await MrRequest('/user', {method: 'get'});\n            console.log(response);\n          } catch (error) {\n            console.error(error);\n          }\n    }\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"axios-options\"}}>{`Axios Options`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`const AxiosOptions = {\n  // \\`url\\` is the server URL that will be used for the request\n  url: '/user',\n\n  // \\`method\\` is the request method to be used when making the request\n  method: 'get', // default\n\n  // \\`baseURL\\` will be prepended to \\`url\\` unless \\`url\\` is absolute.\n  // It can be convenient to set \\`baseURL\\` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // \\`transformRequest\\` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // \\`transformResponse\\` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // \\`headers\\` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // \\`params\\` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // \\`paramsSerializer\\` is an optional function in charge of serializing \\`params\\`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // \\`data\\` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no \\`transformRequest\\` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n\n  // \\`timeout\\` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than \\`timeout\\`, the request will be aborted.\n  timeout: 1000, // default is \\`0\\` (no timeout)\n\n  // \\`withCredentials\\` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // \\`adapter\\` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // \\`auth\\` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an \\`Authorization\\` header, overwriting any existing\n  // \\`Authorization\\` custom headers you have set using \\`headers\\`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // \\`responseType\\` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\n\n  // \\`responseEncoding\\` indicates encoding to use for decoding responses\n  // Note: Ignored for \\`responseType\\` of 'stream' or client-side requests\n  responseEncoding: 'utf8', // default\n\n  // \\`xsrfCookieName\\` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // \\`xsrfHeaderName\\` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // \\`onUploadProgress\\` allows handling of progress events for uploads\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // \\`onDownloadProgress\\` allows handling of progress events for downloads\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // \\`maxContentLength\\` defines the max size of the http response content in bytes allowed\n  maxContentLength: 2000,\n\n  // \\`validateStatus\\` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If \\`validateStatus\\` returns \\`true\\` (or is set to \\`null\\`\n  // or \\`undefined\\`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // \\`maxRedirects\\` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // \\`socketPath\\` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either \\`socketPath\\` or \\`proxy\\` can be specified.\n  // If both are specified, \\`socketPath\\` is used.\n  socketPath: null, // default\n\n  // \\`httpAgent\\` and \\`httpsAgent\\` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // \\`keepAlive\\` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' defines the hostname and port of the proxy server.\n  // You can also define your proxy using the conventional \\`http_proxy\\` and\n  // \\`https_proxy\\` environment variables. If you are using environment variables\n  // for your proxy configuration, you can also define a \\`no_proxy\\` environment\n  // variable as a comma-separated list of domains that should not be proxied.\n  // Use \\`false\\` to disable proxies, ignoring environment variables.\n  // \\`auth\\` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an \\`Proxy-Authorization\\` header, overwriting any existing\n  // \\`Proxy-Authorization\\` custom headers you have set using \\`headers\\`.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // \\`cancelToken\\` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"response-schema\"}}>{`Response Schema`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The response for a request contains the following information.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-javascript\"}}>{`{\n  // \\`data\\` is the response that was provided by the server\n  data: {},\n\n  // \\`status\\` is the HTTP status code from the server response\n  status: 200,\n\n  // \\`statusText\\` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // \\`headers\\` the headers that the server responded with\n  // All header names are lower cased\n  headers: {},\n\n  // \\`config\\` is the config that was provided to \\`axios\\` for the request\n  config: {},\n\n  // \\`request\\` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance the browser\n  request: {}\n}\n`}</MDXTag></MDXTag>\n           </MDXTag>\n  }\n}\n  ","/**\n * MrRequest\n * 简单封装fetch\n *\n * @creator mizi.lin\n *\n * @update mizi.lin@v0.1.21.20180516\n * ::=> 修复 headers 不接受 function，不能获取最新值\n *\n * @update mizi.lin@v0.1.23,20180523\n * ::=> 移除 catch 时回调 responseHandler\n *\n * @update mizi.lin@v0.2.0.20180607\n * ::=> 使用 axios 替换 fetch （Loreal中国不知道为什么网关阻止 fetch.get 但允许 fetch.post)）\n * ::=> fetch@v0.1.27-b3\n *\n * @update mizi.lin@v0.2.0-b7.2o18o612\n * ::=> fixed bugs: catch error return value 没有判断是否为promise又外裹一层promise.reject\n *\n * @update mizi.lin@v1.0.3\n * :: => 取消ajax请求, 仅支持取消单条请求\n */\n\nimport MrServices from './mr.services';\nimport  mu from 'mzmu';\nimport axios, { AxiosResponse, AxiosRequestConfig } from 'axios';\n\n\nconst CancelToken = axios.CancelToken;\n\n// const source = CancelToken.source();\n\ninterface MrAxiosRequestConfig extends AxiosRequestConfig {\n    resultType: string;\n    mock: boolean;\n}\n\n/**\n * responseHandler(response: AxiosResponse)\n * @todo 编写文档的时候注明可以根据不同的resultType返回不同的类型\n * @param {AxiosResponse} response\n * @return {Promise<any>}\n */\nfunction responseHandler(response: AxiosResponse) {\n    let { resultType } = response.config as MrAxiosRequestConfig;\n    let { mock  } = response.config as MrAxiosRequestConfig;\n    let rst;\n\n    // @todo 编写文档的时候注明可以根据不同的resultType返回不同的类型\n    switch (resultType) {\n        case 'response':\n            rst = response;\n            break;\n        default:\n            rst = response.data;\n            break;\n    }\n\n    if(mock && typeof rst === 'object') {\n        rst = MrServices.mock(rst);\n    }\n\n    return Promise.resolve(rst);\n}\n\nfunction errorHandler(err) {\n\n    // 取消请求\n    if (axios.isCancel(err)) {\n        // let self = MrServices._reqCatch;\n        // if(self) {\n        //     err = self(err);\n        // }\n        //\n        // return Promise.reject(err);\n\n        /**\n         * 取消请求跳过全局配置中输出\n         * 只能在单个请求中配置catch信息\n         */\n        return Promise.reject(err);\n    } else {\n        const { response } = err;\n\n        if(!response) {\n           return Promise.reject(err)\n        }\n\n        // 设置reject, 表示该 catch 后，不再接受 then\n        let { headers, status, statusText, data } = response;\n\n        // 兼容fetch使用promise获得信息\n        let $message: any = new Promise((resolve) => resolve(data));\n\n        // 传递error信息\n        let error: any = {\n            headers,\n            status,\n            statusText,\n            data,\n            $message,\n            response,\n            error: err\n        };\n\n        let self = MrServices._reqCatch;\n        if (self) {\n            error = self(error);\n        }\n\n        return Object.prototype.toString.call(error) === '[object Promise]' ? error : Promise.reject(error);\n    }\n\n}\n\n/**\n * Requests a URL, returning a promise.\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n * @return {object}           An object containing either \"data\" or \"err\"\n */\n\n// @todo 接收option自定义值，配置可接受参数，控制报错流程\nexport default function MrRequest(url, options: any = {}) {\n\n    let headers: any = MrServices.getHeaders();\n\n    headers = mu.map(headers || {}, (item) => {\n        return typeof item === 'function' ? item() : item;\n    });\n\n    options.headers = mu.extend(true, headers, options.headers);\n    options.url = url;\n\n    // v1.0.3\n    // add cancel request\n    mu.run(typeof options.cancelToken === 'function', () => {\n        options.cancelToken = new CancelToken(options.cancelToken);\n    });\n\n    return axios(options)\n    .then(responseHandler)\n    .catch(errorHandler);\n}\n\ntry {\n    // @ts-ignore\n    mrrequest.displayName = \"mrrequest\";\n    // @ts-ignore\n    mrrequest.__docgenInfo = { \"description\": \"Requests a URL, returning a promise.\\n@param url The URL we want to request\\n@param options The options we want to pass to \\\"fetch\\\"\\n@return An object containing either \\\"data\\\" or \\\"err\\\"\", \"displayName\": \"mrrequest\", \"props\": {} };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/lib/mr-common/mr-request.ts#mrrequest\"] = { docgenInfo: mrrequest.__docgenInfo, name: \"mrrequest\", path: \"src/lib/mr-common/mr-request.ts#mrrequest\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"sourceRoot":""}